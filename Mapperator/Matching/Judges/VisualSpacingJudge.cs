using Mapperator.Construction;
using Mapperator.Model;
using Mapping_Tools_Core.BeatmapHelper.HitObjects;
using Mapping_Tools_Core.BeatmapHelper.HitObjects.Objects;
using Mapping_Tools_Core.MathUtil;

namespace Mapperator.Matching.Judges;

public class VisualSpacingJudge : IJudge {
    // Visual spacing probability density values from Sotarks maps
    private const int Bins = 512;
    private static readonly double[] probs = {
        3.968011261, 2.123422242, 1.926094115, 0.7742984135, 0.2488050304, 0.08579483807, 0.05362177379, 0.04933203189, 0.03002819332, 0.06005638665, 0.04718716094, 0.03217306427, 0.03431793523, 0.0622012576, 0.04718716094, 0.05147690284, 0.05147690284, 0.06863587045, 0.0622012576, 0.07292561236, 0.08579483807, 0.07292561236, 0.09008457997, 0.09222945092, 0.08364996711, 0.1179679023, 0.1179679023, 0.1050986766, 0.09651919282, 0.1050986766, 0.1286922571, 0.1565755795, 0.1394166119, 0.1286922571, 0.1544307085, 0.1479960957, 0.1308371281, 0.1737345471, 0.1672999342, 0.1694448052, 0.175879418, 0.2059076114, 0.1801691599, 0.1801691599, 0.1951832566, 0.175879418, 0.1630101923, 0.2166319661, 0.2101973533, 0.2295011918, 0.1887486437, 0.1973281276, 0.1844589018, 0.2080524823, 0.2380806756, 0.2295011918, 0.2166319661, 0.2402255466, 0.268108869, 0.2123422242, 0.2144870952, 0.2144870952, 0.2788332237, 0.2766883528, 0.2745434818, 0.3067165461, 0.2466601594, 0.308861417, 0.3152960299, 0.2831229656, 0.3303101266, 0.3260203847, 0.3603383199, 0.3024268042, 0.3710626746, 0.308861417, 0.3946562551, 0.3624831908, 0.4075254808, 0.3946562551, 0.3925113842, 0.4246844484, 0.3732075456, 0.401090868, 0.3903665132, 0.4289741903, 0.4718716094, 0.486885706, 0.4761613513, 0.4783062222, 0.5083344155, 0.5619561893, 0.4718716094, 0.5190587703, 0.4654369965, 0.4911754479, 0.4654369965, 0.5405074798, 0.441843416, 0.5405074798, 0.4332639322, 0.5362177379, 0.5169138994, 0.5297831251, 0.5040446736, 0.4675818675, 0.4761613513, 0.4611472546, 0.4654369965, 0.4375536741, 0.489030577, 0.3817870294, 0.4825959641, 0.4740164803, 0.4332639322, 0.4161049646, 0.443988287, 0.3817870294, 0.3882216423, 0.3732075456, 0.3024268042, 0.401090868, 0.356048578, 0.311006288, 0.3431793523, 0.3195857718, 0.2895575785, 0.3345998685, 0.3195857718, 0.3067165461, 0.2745434818, 0.2466601594, 0.3002819332, 0.2573845142, 0.2809780947, 0.2337909337, 0.268108869, 0.220921708, 0.2380806756, 0.1844589018, 0.1715896761, 0.1565755795, 0.1694448052, 0.1286922571, 0.2144870952, 0.1908935147, 0.1565755795, 0.1608653214, 0.1372717409, 0.1630101923, 0.09437432187, 0.1394166119, 0.1179679023, 0.1179679023, 0.1029538057, 0.1544307085, 0.09866406378, 0.1115332895, 0.1308371281, 0.1394166119, 0.09651919282, 0.1008089347, 0.0707807414, 0.1008089347, 0.09437432187, 0.1072435476, 0.1029538057, 0.09651919282, 0.06863587045, 0.09222945092, 0.08579483807, 0.09866406378, 0.0664909995, 0.07292561236, 0.1201127733, 0.1093884185, 0.09222945092, 0.0664909995, 0.1029538057, 0.07507048331, 0.09008457997, 0.09866406378, 0.1115332895, 0.09222945092, 0.08364996711, 0.1179679023, 0.1308371281, 0.175879418, 0.1630101923, 0.1823140309, 0.1951832566, 0.2252114499, 0.2166319661, 0.3045716751, 0.3238755137, 0.3152960299, 0.4268293194, 0.5147690284, 0.4697267384, 0.5426523508, 0.5962741246, 0.6434612855, 0.7485599621, 0.8558035097, 0.9287291221, 0.9351637349, 1.162520056, 1.166809798, 1.301936668, 1.484250699, 1.525003247, 1.709462148, 1.855313373, 1.958267179, 2.136291468, 2.127711984, 2.144870952, 2.34434395, 2.271418338, 2.711116883, 2.646770754, 2.711116883, 2.871982204, 2.904155269, 2.833374527, 3.255914105, 2.889141172, 3.150815428, 3.300956395, 3.084324428, 3.148670557, 3.047861622, 2.811925818, 3.504719135, 2.790477108, 2.966356526, 2.869837333, 2.846243753, 2.886996301, 2.730420721, 2.77117327, 2.70468227, 2.651060496, 2.563120787, 2.769028399, 2.537382336, 2.578134884, 2.498774659, 2.556686174, 2.593148981, 2.492340046, 2.397965724, 2.342199079, 2.211361951, 2.408690079, 2.400110595, 2.232810661, 2.1191325, 2.187768371, 2.157740177, 2.101973533, 2.037627404, 1.943253082, 2.162029919, 2.022613307, 2.101973533, 1.990440243, 1.945397953, 1.861747986, 2.061220985, 1.958267179, 2.022613307, 1.878906954, 1.947542824, 1.874617212, 1.675144213, 1.951832566, 1.765228793, 1.829574922, 1.876762083, 1.91536976, 1.799546728, 1.743780084, 1.655840375, 1.69015831, 1.670854471, 1.683723697, 1.831719793, 1.589349375, 1.715896761, 1.677289084, 1.675144213, 1.670854471, 1.585059633, 1.653695504, 1.677289084, 1.507844279, 1.651550633, 1.585059633, 1.795256987, 1.537872472, 1.520713505, 1.696592923, 1.595783988, 1.681578826, 1.597928859, 1.520713505, 1.57862502, 1.458512247, 1.610798085, 1.587204504, 1.407035344, 1.552886569, 1.460657118, 1.507844279, 1.48639557, 1.460657118, 1.494975053, 1.612942956, 1.282632829, 1.597928859, 1.477816086, 1.490685311, 1.35341357, 1.544307085, 1.359848183, 1.544307085, 1.417759699, 1.392021248, 1.557176311, 1.321240506, 1.432773796, 1.512134021, 1.316950764, 1.385586635, 1.44135328, 1.368427667, 1.535727601, 1.385586635, 1.21614183, 1.473526344, 1.26118412, 1.492830182, 1.381296893, 1.319095635, 1.323385377, 1.368427667, 1.340544345, 1.497119924, 1.265473861, 1.289067442, 1.366282796, 1.241880281, 1.368427667, 1.387731506, 1.203272604, 1.237590539, 1.156085443, 1.220431571, 1.35341357, 1.295502055, 1.235445668, 1.282632829, 1.248314894, 1.349123829, 1.259039249, 1.269763603, 1.271908474, 1.072435476, 1.325530248, 1.205417475, 1.334109732, 1.267618732, 1.299791797, 1.282632829, 1.289067442, 1.220431571, 1.179679023, 1.23973541, 1.250459765, 1.254749507, 1.168954669, 1.138926475, 1.271908474, 1.068145734, 1.117477766, 1.181823894, 1.027393186, 1.222576442, 1.143216217, 1.121767508, 1.166809798, 1.100318798, 1.145361088, 1.040262412, 1.083159831, 1.19469312, 1.123912379, 1.074580347, 1.113188024, 1.072435476, 1.21614183, 1.111043153, 1.119622637, 1.138926475, 1.115332895, 1.076725218, 1.102463669, 1.08101496, 1.117477766, 1.042407283, 1.164664927, 1.098173927, 1.143216217, 1.083159831, 1.226866184, 1.213996959, 1.072435476, 1.151795701, 1.087449572, 1.113188024, 1.003799605, 1.115332895, 1.040262412, 1.018813702, 1.113188024, 1.023103444, 0.9501778316, 1.072435476, 0.9373086059, 1.012379089, 1.038117541, 0.9609021863, 1.096029056, 0.9544675735, 0.9844957668, 1.096029056, 0.9952201216, 1.003799605, 1.160375185, 1.005944476, 1.098173927, 1.070290605, 0.9716265411, 1.175389282, 0.9952201216, 1.029538057, 1.173244411, 0.9694816702, 0.9651919282, 1.038117541, 0.9180047673, 1.061711121, 1.14965083, 0.9244393802, 1.106753411, 1.050986766, 0.9716265411, 1.042407283, 0.9287291221, 0.9651919282, 0.9866406378, 0.9566124444, 1.018813702, 0.8815419611, 0.9480329606, 1.061711121, 0.9716265411, 0.9694816702, 1.033827799, 0.885831703, 0.9480329606, 0.9201496383, 0.9609021863, 1.008089347, 0.8493688969, 0.8686727354, 1.027393186, 0.9802060249, 0.8129060907, 0.8493688969, 0.9609021863, 0.9823508959, 0.8708176064, 0.8965560578, 0.8622381226, 0.8472240259, 0.8751073483, 0.8622381226, 0.8300650583, 0.8987009287, 0.845079155, 0.8600932516, 0.8472240259, 0.8515137678, 0.8751073483, 0.7936022521, 0.933018864, 0.7957471231, 0.7828778974, 0.8836868321, 0.8729624773, 0.6927933174, 0.9158598964, 0.8536586388, 0.7914573812, 0.8922663159, 0.8193407035, 0.7785881555, 0.6627651241, 0.8836868321, 0.8236304454
    };

    private readonly double lookBack;
    private readonly BeatmapConstructor constructor;
    private readonly ReadOnlyMemory<MapDataPoint> pattern;
    private readonly double objectRadius;

    private Continuation myContinuation;
    private int myPatternIndex;
    private HitObject[]? neighbours;
    private Dictionary<HitObject, Vector2[]>? hoPoints;

    public VisualSpacingJudge(ReadOnlyMemory<MapDataPoint> pattern, double lookBack, double objectRadius) {
        this.lookBack = lookBack;
        this.pattern = pattern;
        this.objectRadius = objectRadius;
        constructor = new BeatmapConstructor { SelectNewObjects = true };
    }

    public void Init(IEnumerable<HitObject> hitObjects, Continuation continuation, int patternIndex) {
        myContinuation = continuation;
        myPatternIndex = patternIndex;

        neighbours = hitObjects.Where(ho => ho is HitCircle or Slider && ho.StartTime <= continuation.Time && ho.EndTime >= continuation.Time - lookBack).ToArray();
        hoPoints = Analyzer.GetHitObjectsAsPoints(neighbours);
    }

    public double Judge(Match match) {
        if (neighbours is null || hoPoints is null) return 1;

        var newHitObjects = new List<HitObject>(neighbours);
        var newPoints = new Dictionary<HitObject, Vector2[]>(hoPoints);
        constructor.Construct(newHitObjects, match, pattern.Span[myPatternIndex..], myContinuation);
        var matchHitObjects = newHitObjects.Where(o => o.IsSelected);

        double score = 1;
        foreach (var hitObject in matchHitObjects) {
            var points = Analyzer.GetHitObjectAsPoints(hitObject);
            var hitObjectIndex = newHitObjects.IndexOf(hitObject);
            newPoints[hitObject] = points;

            foreach (var neighbour in neighbours) {
                var neighbourIndex = newHitObjects.IndexOf(neighbour);
                if (neighbourIndex < 0) continue;

                var maxDist = Analyzer.CalculateMaxDist(neighbourIndex, hitObjectIndex, newHitObjects, newPoints);
                var dist = Analyzer.ShortestDistance(points, hoPoints[neighbour]);
                var distClass = (int)Math.Round(dist / objectRadius * 100);

                if (hitObject is Slider && neighbour is Slider && distClass < 175) {
                    score *= 0.1;
                    continue;
                }

                if (distClass is < Bins and >= 0 && dist * 1.5 < maxDist)
                    score *= probs[distClass];
            }
        }

        return score;
    }

    public int MinLengthForScore(double wantedScore) {
        return 1;
    }
}